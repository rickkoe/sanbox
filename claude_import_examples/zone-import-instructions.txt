I want to build a new component from scratch for importing data into the database/tables of this app.  Currently, there is a functional BulkZoningImportPage for importing aliases and zones into a fabric that only works for Cisco aliases.  I want to have this same functionality in the new component, but I want you to look at the example files/data that I want it to be able to handle and have you come up with the most efficient and effective way to parse and import the data.  We will start by just importing SAN Alias and Zones, but eventually, it needs to be able to handle parsing an importing things like volumes, hosts, ports, etc for storage systems as well as future ready for eventual handling of IBM Power servers (not implemented in this app yet.). Also, I'm wondering if this component could handle the Storage Insights imports that are currently being done by the StorageInsightsImporter.  That importer is super slow and not very granular or featured yet in what it can pull in from IBM storage insights.  If you can read about the IBM Storage Insights REST API and build out that part as well so that imports will run much faster and have awareness of all the available options to import with the API.  Perhaps the backend of that importer needs some work too?

In the san app on the backend, we have a model for wwpn prefixes to help determine if wwpns are initiator or targets.  Can you have the build populate that table with known prefixes for IBM storage and IBM hosts such as power server (physical and virtual wwpns) as well as typical ESX hosts and bare metal host wwpns.

For examples of data to import, please see the folder claude_import_examples in the project root.  I want the importer to be able to handle these files uploaded or portions of them pasted in. Here's a summary of what the examples are:
# Cisco
	## show-tech-support.txt
		This file is the output of the command show tech-support from Cisco MDS SAN switches.  The headers for each section are lead with a '`show '.  The sections to import from are as follows (the rest of the sections in the file can be ignored/discarded.  As soon as the importer has scanned all of these sections, it can stop parsing the file.  Hopefully this will save time as these files are huge!)
		### Fabrics
		Prompt the user if the aliases and zones should be imported into an existing fabric or if a new fabric should be created.  If creating a new fabric use the switchname_vsanxx as the fabric name.
		`show vsan`
			each vsan can be considered a fabric in our app.  If the oprational state = down in this section, that VSAN can be ignored.
		### Aliases
		There may be duplicate WWPNs between device-aliases and fcaliases.  So, we are going to have to change our database to allow for this.  So, the new unique rule for our app will be that all device-aliases in a project must be unique name and wwpn, but a fcalias can have the same wwpn as a device-alias.  fcalias names must be unique, but wwpns within all of the fcaliases for a project do not need to be unique.
		`show device-alias database`
		`show fcalias vsan 1-4093`
		### Zone Imports
		`show zone vsan 1-4093`

		Import zones as they are with members of:  fcalias, device-alias, or pwwn.  If a zone has a pwwn member that is not an alias create an alias in the database of with a name of the wwpn without colons and set the alias-type to wwpn:

		Peer zones will have members with a tag behind them of target, init, or both.  In the example below, this is a peer zone.  The alias name in parenthesis as a device-alias, so the members in this zone should be all device-aliases.

		zone name sz_78E37VE_port9 vsan 75
		  pwwn 50:05:07:68:10:35:7a:a9 [s_78E37VE_n1p9]  target
		  pwwn 50:05:07:68:10:35:7a:b4 [s_78E37VE_n2p9]  target
		  pwwn c0:50:76:09:15:09:01:14 [PRD03A_CLM_01a]  init
		  pwwn c0:50:76:09:15:09:01:18 [PRD03A_CLM_03a]  init


		fcaliases can also have a tag in them for use in peer zones.

		###Zonesets
		`show zoneset active vsan 1-4093`
		Just use the name here to set the zoneset for the fabric in the app database.

	## show-running-config.txt
		It should be intuitive how to derive the fabrics, aliases, and zones from this file, but if not, please respond with questions.

# Brocade

	The files are from a SAN Health report.  I don't see any indication of what is a peer zone other than ones that have a member starting with 00.  Hoping you can help figure out what can be imported here from the SAN health.

	Also, are there any config commands that could be ran on the switch CLI to import?

# Other stuff

	Plan for this to be used for storage objects, hosts, ports, etc to be imported via CSVs and output from CLI.  IBM DS8000 and FlashSystem specifically.  

