version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: sanbox_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sanbox_db}
      POSTGRES_USER: ${POSTGRES_USER:-sanbox_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sanbox_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sanbox_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: sanbox_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sanbox_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Django Backend (Production Mode with Gunicorn)
  backend:
    image: sanbox-backend:${VERSION:-latest}
    # Uncomment 'build' section if building locally instead of using pre-built images
    # build:
    #   context: ./backend
    #   target: production
    container_name: sanbox_backend
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=sanbox.settings_docker
      - DEBUG=False
    volumes:
      # Persist logs
      - ./logs:/app/logs
      # Persist media files
      - media_files:/app/media
      # Static files (shared with nginx)
      - static_files:/app/static
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/login/?next=/admin/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sanbox_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 512M

  # Celery Worker
  celery-worker:
    image: sanbox-backend:${VERSION:-latest}
    # Uncomment 'build' section if building locally instead of using pre-built images
    # build:
    #   context: ./backend
    #   target: production
    container_name: sanbox_celery_worker
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=sanbox.settings_docker
      - DEBUG=False
    volumes:
      # Persist logs
      - ./logs:/app/logs
      # Share media files
      - media_files:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: celery -A sanbox worker --loglevel=info --concurrency=${CELERY_WORKERS:-4}
    restart: unless-stopped
    networks:
      - sanbox_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 512M

  # Celery Beat (Scheduler)
  celery-beat:
    image: sanbox-backend:${VERSION:-latest}
    # Uncomment 'build' section if building locally instead of using pre-built images
    # build:
    #   context: ./backend
    #   target: production
    container_name: sanbox_celery_beat
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=sanbox.settings_docker
      - DEBUG=False
    volumes:
      # Persist logs
      - ./logs:/app/logs
      # Share media files
      - media_files:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: celery -A sanbox beat --loglevel=info
    restart: unless-stopped
    networks:
      - sanbox_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # React Frontend (Production Build served by Nginx - acts as reverse proxy)
  frontend:
    image: sanbox-frontend:${VERSION:-latest}
    # Uncomment 'build' section if building locally instead of using pre-built images
    # build:
    #   context: ./frontend
    #   target: production
    container_name: sanbox_frontend
    ports:
      - "80:8080"
      # Uncomment for HTTPS (after running ./setup-ssl.sh)
      - "443:8443"
    volumes:
      # Share static files from backend
      - static_files:/app/static:ro
      # Share media files from backend
      - media_files:/app/media:ro
      # Uncomment for HTTPS with Let's Encrypt (after running ./setup-ssl.sh)
      # - /etc/letsencrypt:/etc/letsencrypt:ro
      # - /var/www/certbot:/var/www/certbot:ro
      # - ./nginx/nginx-ssl-active.conf:/etc/nginx/conf.d/default.conf:ro
      # Uncomment for HTTPS with self-signed cert (after running ./setup-ssl-selfsigned.sh)
      - /etc/ssl/sanbox:/etc/ssl/sanbox:ro
      - ./nginx/nginx-ssl-selfsigned.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sanbox_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

networks:
  sanbox_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local
