apiVersion: v1
kind: List
metadata:
  name: sanbox-deployments
items:
  # PostgreSQL Deployment
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: postgres
      labels:
        app: sanbox
        component: database
    spec:
      serviceName: postgres
      replicas: 1
      selector:
        matchLabels:
          app: sanbox
          component: database
      template:
        metadata:
          labels:
            app: sanbox
            component: database
        spec:
          securityContext:
            fsGroup: 26
          containers:
            - name: postgres
              image: postgres:16-alpine
              ports:
                - containerPort: 5432
                  name: postgres
              env:
                - name: POSTGRES_DB
                  valueFrom:
                    configMapKeyRef:
                      name: sanbox-config
                      key: POSTGRES_DB
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: sanbox-secrets
                      key: POSTGRES_USER
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: sanbox-secrets
                      key: POSTGRES_PASSWORD
              volumeMounts:
                - name: postgres-data
                  mountPath: /var/lib/postgresql/data
              livenessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - pg_isready -U $POSTGRES_USER
                initialDelaySeconds: 30
                periodSeconds: 10
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - pg_isready -U $POSTGRES_USER
                initialDelaySeconds: 5
                periodSeconds: 5
              resources:
                requests:
                  cpu: 500m
                  memory: 1Gi
                limits:
                  cpu: 2
                  memory: 2Gi
      volumeClaimTemplates:
        - metadata:
            name: postgres-data
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi

  # Redis Deployment
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: redis
      labels:
        app: sanbox
        component: cache
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: sanbox
          component: cache
      template:
        metadata:
          labels:
            app: sanbox
            component: cache
        spec:
          securityContext:
            runAsUser: 1001
            fsGroup: 1001
          containers:
            - name: redis
              image: redis:7-alpine
              args:
                - redis-server
                - --appendonly
                - "yes"
                - --maxmemory
                - "512mb"
                - --maxmemory-policy
                - allkeys-lru
              ports:
                - containerPort: 6379
                  name: redis
              volumeMounts:
                - name: redis-data
                  mountPath: /data
              livenessProbe:
                exec:
                  command:
                    - redis-cli
                    - ping
                initialDelaySeconds: 30
                periodSeconds: 10
              readinessProbe:
                exec:
                  command:
                    - redis-cli
                    - ping
                initialDelaySeconds: 5
                periodSeconds: 5
              resources:
                requests:
                  cpu: 250m
                  memory: 256Mi
                limits:
                  cpu: 1
                  memory: 512Mi
          volumes:
            - name: redis-data
              persistentVolumeClaim:
                claimName: redis-data

  # Django Backend Deployment
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: backend
      labels:
        app: sanbox
        component: backend
    spec:
      replicas: 2
      selector:
        matchLabels:
          app: sanbox
          component: backend
      template:
        metadata:
          labels:
            app: sanbox
            component: backend
        spec:
          securityContext:
            runAsUser: 1001
            fsGroup: 1001
          initContainers:
            - name: migrate
              image: sanbox-backend:latest
              command:
                - python
                - manage.py
                - migrate
              envFrom:
                - configMapRef:
                    name: sanbox-config
                - secretRef:
                    name: sanbox-secrets
          containers:
            - name: backend
              image: sanbox-backend:latest
              ports:
                - containerPort: 8000
                  name: http
              envFrom:
                - configMapRef:
                    name: sanbox-config
                - secretRef:
                    name: sanbox-secrets
              volumeMounts:
                - name: media-files
                  mountPath: /app/media
                - name: static-files
                  mountPath: /app/static
                - name: logs
                  mountPath: /app/logs
              livenessProbe:
                httpGet:
                  path: /api/
                  port: 8000
                initialDelaySeconds: 60
                periodSeconds: 10
              readinessProbe:
                httpGet:
                  path: /api/
                  port: 8000
                initialDelaySeconds: 30
                periodSeconds: 5
              resources:
                requests:
                  cpu: 500m
                  memory: 512Mi
                limits:
                  cpu: 2
                  memory: 2Gi
          volumes:
            - name: media-files
              persistentVolumeClaim:
                claimName: media-files
            - name: static-files
              emptyDir: {}
            - name: logs
              emptyDir: {}

  # Celery Worker Deployment
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: celery-worker
      labels:
        app: sanbox
        component: celery-worker
    spec:
      replicas: 2
      selector:
        matchLabels:
          app: sanbox
          component: celery-worker
      template:
        metadata:
          labels:
            app: sanbox
            component: celery-worker
        spec:
          securityContext:
            runAsUser: 1001
            fsGroup: 1001
          containers:
            - name: celery-worker
              image: sanbox-backend:latest
              command:
                - celery
                - -A
                - sanbox
                - worker
                - --loglevel=info
                - --concurrency=4
              envFrom:
                - configMapRef:
                    name: sanbox-config
                - secretRef:
                    name: sanbox-secrets
              volumeMounts:
                - name: media-files
                  mountPath: /app/media
                - name: logs
                  mountPath: /app/logs
              resources:
                requests:
                  cpu: 500m
                  memory: 512Mi
                limits:
                  cpu: 2
                  memory: 2Gi
          volumes:
            - name: media-files
              persistentVolumeClaim:
                claimName: media-files
            - name: logs
              emptyDir: {}

  # Celery Beat Deployment
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: celery-beat
      labels:
        app: sanbox
        component: celery-beat
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: sanbox
          component: celery-beat
      template:
        metadata:
          labels:
            app: sanbox
            component: celery-beat
        spec:
          securityContext:
            runAsUser: 1001
            fsGroup: 1001
          containers:
            - name: celery-beat
              image: sanbox-backend:latest
              command:
                - celery
                - -A
                - sanbox
                - beat
                - --loglevel=info
              envFrom:
                - configMapRef:
                    name: sanbox-config
                - secretRef:
                    name: sanbox-secrets
              volumeMounts:
                - name: logs
                  mountPath: /app/logs
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
          volumes:
            - name: logs
              emptyDir: {}

  # Frontend/Nginx Deployment
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: nginx
      labels:
        app: sanbox
        component: nginx
    spec:
      replicas: 2
      selector:
        matchLabels:
          app: sanbox
          component: nginx
      template:
        metadata:
          labels:
            app: sanbox
            component: nginx
        spec:
          securityContext:
            runAsUser: 1001
            fsGroup: 1001
          containers:
            - name: nginx
              image: sanbox-nginx:latest
              ports:
                - containerPort: 8080
                  name: http
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                initialDelaySeconds: 30
                periodSeconds: 10
              readinessProbe:
                httpGet:
                  path: /health
                  port: 8080
                initialDelaySeconds: 5
                periodSeconds: 5
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 500m
                  memory: 256Mi
