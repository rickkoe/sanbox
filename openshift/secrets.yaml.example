# Example secrets file for OpenShift
# Copy this to secrets.yaml and update with your actual values
# DO NOT commit secrets.yaml to version control!
#
# To create the secret from this file:
# 1. Copy to secrets.yaml: cp secrets.yaml.example secrets.yaml
# 2. Update all values in secrets.yaml
# 3. Base64 encode each value: echo -n 'your-value' | base64
# 4. Apply: oc apply -f secrets.yaml
#
# Or create directly with oc:
# oc create secret generic sanbox-secrets \
#   --from-literal=DJANGO_SECRET_KEY='your-secret-key' \
#   --from-literal=POSTGRES_USER='sanbox_user' \
#   --from-literal=POSTGRES_PASSWORD='your-password'

apiVersion: v1
kind: Secret
metadata:
  name: sanbox-secrets
  labels:
    app: sanbox
type: Opaque
data:
  # Django secret key - base64 encoded
  # Generate with: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
  DJANGO_SECRET_KEY: Y2hhbmdlLXRoaXMtdG8tYS1yYW5kb20tc2VjcmV0LWtleQ==

  # PostgreSQL credentials - base64 encoded
  POSTGRES_USER: c2FuYm94X3VzZXI=
  POSTGRES_PASSWORD: Y2hhbmdlLXRoaXMtcGFzc3dvcmQ=

  # Email settings (if using SMTP) - base64 encoded
  EMAIL_HOST_USER: ""
  EMAIL_HOST_PASSWORD: ""

---
# Instructions for generating and applying secrets:
#
# 1. Generate a new Django secret key:
#    python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
#
# 2. Base64 encode each secret value:
#    echo -n 'your-secret-value' | base64
#
# 3. Update the data section above with your base64-encoded values
#
# 4. Apply the secret:
#    oc apply -f secrets.yaml
#
# 5. Verify the secret was created:
#    oc get secret sanbox-secrets
#    oc describe secret sanbox-secrets
#
# Alternative: Create secret directly from command line:
#    oc create secret generic sanbox-secrets \
#      --from-literal=DJANGO_SECRET_KEY='your-django-secret-key' \
#      --from-literal=POSTGRES_USER='sanbox_user' \
#      --from-literal=POSTGRES_PASSWORD='your-secure-password'
