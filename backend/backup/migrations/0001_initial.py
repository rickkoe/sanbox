# Generated by Django 5.1.6 on 2025-10-23 19:01

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BackupConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backup_directory', models.CharField(default='/app/backups', help_text='Directory where backups are stored', max_length=500)),
                ('max_backups', models.IntegerField(default=10, help_text='Maximum number of backups to retain (0 = unlimited)')),
                ('auto_backup_enabled', models.BooleanField(default=False, help_text='Enable automatic scheduled backups')),
                ('auto_backup_hour', models.IntegerField(default=2, help_text='Hour of day for automatic backup (0-23)')),
                ('auto_backup_include_media', models.BooleanField(default=False, help_text='Include media files in automatic backups')),
                ('retention_days', models.IntegerField(default=30, help_text='Days to retain backups (0 = keep all)')),
                ('use_compression', models.BooleanField(default=True, help_text='Compress backup files')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='backup_configs_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Backup Configuration',
                'verbose_name_plural': 'Backup Configuration',
            },
        ),
        migrations.CreateModel(
            name='BackupRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Descriptive name for this backup', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Optional description or notes about this backup')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('verifying', 'Verifying'), ('verified', 'Verified')], default='pending', max_length=20)),
                ('backup_type', models.CharField(choices=[('full', 'Full Backup'), ('schema_only', 'Schema Only'), ('data_only', 'Data Only')], default='full', max_length=20)),
                ('file_path', models.CharField(help_text='Path to the backup file', max_length=500)),
                ('file_size', models.BigIntegerField(blank=True, help_text='Backup file size in bytes', null=True)),
                ('checksum', models.CharField(blank=True, help_text='SHA256 checksum for integrity verification', max_length=64)),
                ('app_version', models.CharField(blank=True, help_text='Application version (git tag/commit)', max_length=50)),
                ('django_version', models.CharField(max_length=20)),
                ('python_version', models.CharField(max_length=20)),
                ('postgres_version', models.CharField(blank=True, max_length=20)),
                ('migration_state', models.JSONField(help_text='Migration IDs for each Django app at backup time')),
                ('installed_apps', models.JSONField(help_text='List of installed Django apps')),
                ('database_size', models.BigIntegerField(blank=True, help_text='Database size in bytes at backup time', null=True)),
                ('table_counts', models.JSONField(blank=True, help_text='Row counts for each table', null=True)),
                ('includes_media', models.BooleanField(default=False, help_text='Whether media files are included in this backup')),
                ('media_file_path', models.CharField(blank=True, help_text='Path to media files archive', max_length=500)),
                ('media_file_size', models.BigIntegerField(blank=True, help_text='Media archive size in bytes', null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('celery_task_id', models.CharField(blank=True, help_text='Celery task ID for background processing', max_length=255, null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error details if backup failed')),
                ('metadata', models.JSONField(blank=True, help_text='Additional backup metadata', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='backups_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Backup Record',
                'verbose_name_plural': 'Backup Records',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BackupLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('level', models.CharField(choices=[('DEBUG', 'Debug'), ('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error')], default='INFO', max_length=10)),
                ('message', models.TextField()),
                ('details', models.JSONField(blank=True, help_text='Additional structured data', null=True)),
                ('backup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='backup.backuprecord')),
            ],
            options={
                'verbose_name': 'Backup Log',
                'verbose_name_plural': 'Backup Logs',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='RestoreRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('validating', 'Validating'), ('pre_backup', 'Creating Pre-Restore Backup'), ('restoring', 'Restoring'), ('migrating', 'Running Migrations'), ('completed', 'Completed'), ('failed', 'Failed'), ('rolled_back', 'Rolled Back')], default='pending', max_length=20)),
                ('schema_compatible', models.BooleanField(default=False, help_text='Whether backup schema matches current code')),
                ('migration_plan', models.JSONField(blank=True, help_text='Migrations to run after restore', null=True)),
                ('compatibility_warnings', models.JSONField(blank=True, help_text='Warnings about schema compatibility', null=True)),
                ('restore_media', models.BooleanField(default=True, help_text='Whether to restore media files')),
                ('run_migrations', models.BooleanField(default=True, help_text='Whether to run migrations after restore')),
                ('celery_task_id', models.CharField(blank=True, help_text='Celery task ID for background processing', max_length=255, null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error details if restore failed')),
                ('migrations_run', models.JSONField(blank=True, help_text='List of migrations that were run', null=True)),
                ('backup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restores', to='backup.backuprecord')),
                ('pre_restore_backup', models.ForeignKey(blank=True, help_text='Automatic backup created before restore', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pre_restore_for', to='backup.backuprecord')),
                ('started_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='restores_started', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Restore Record',
                'verbose_name_plural': 'Restore Records',
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddIndex(
            model_name='backuprecord',
            index=models.Index(fields=['-created_at'], name='backup_back_created_938504_idx'),
        ),
        migrations.AddIndex(
            model_name='backuprecord',
            index=models.Index(fields=['status'], name='backup_back_status_e782d3_idx'),
        ),
        migrations.AddIndex(
            model_name='backuplog',
            index=models.Index(fields=['backup', 'timestamp'], name='backup_back_backup__d1c786_idx'),
        ),
    ]
