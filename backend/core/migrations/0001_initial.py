# Generated by Django 5.1.6 on 2025-10-13 14:53

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, help_text='DEPRECATED: Active config is now tracked per-user in UserConfig model.')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('member', 'Member'), ('viewer', 'Viewer')], default='member', help_text="User's role for this customer", max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'Customer Membership',
                'verbose_name_plural': 'Customer Memberships',
            },
        ),
        migrations.CreateModel(
            name='CustomNamingRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Descriptive name for this naming rule', max_length=100)),
                ('table_name', models.CharField(help_text="Target table name (e.g., 'zones', 'aliases', 'storage')", max_length=100)),
                ('pattern', models.JSONField(help_text='Naming pattern as array of objects with type and value')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this rule is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Custom Naming Rule',
                'verbose_name_plural': 'Custom Naming Rules',
            },
        ),
        migrations.CreateModel(
            name='CustomVariable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Variable name (e.g., 'environment', 'datacenter')", max_length=100)),
                ('value', models.CharField(help_text="Variable value (e.g., 'prod', 'dc1')", max_length=200)),
                ('description', models.CharField(blank=True, help_text='Optional description of what this variable represents', max_length=200, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Custom Variable',
                'verbose_name_plural': 'Custom Variables',
            },
        ),
        migrations.CreateModel(
            name='DashboardAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('view', 'Dashboard View'), ('widget_add', 'Widget Added'), ('widget_remove', 'Widget Removed'), ('widget_resize', 'Widget Resized'), ('widget_move', 'Widget Moved'), ('config_change', 'Configuration Changed'), ('theme_change', 'Theme Changed'), ('export', 'Data Export'), ('refresh', 'Manual Refresh')], max_length=50)),
                ('metadata', models.JSONField(default=dict)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='DashboardLayout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='My Dashboard', max_length=255)),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark')], default='light', max_length=50)),
                ('grid_columns', models.IntegerField(default=12)),
                ('auto_refresh', models.BooleanField(default=True)),
                ('refresh_interval', models.IntegerField(default=30)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='DashboardPreset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('executive', 'Executive Overview'), ('technical', 'Technical Operations'), ('capacity', 'Capacity Planning'), ('security', 'Security Monitoring'), ('performance', 'Performance Analytics'), ('custom', 'Custom Templates')], max_length=50)),
                ('thumbnail_url', models.URLField(blank=True)),
                ('layout_config', models.JSONField()),
                ('required_permissions', models.JSONField(default=list)),
                ('target_roles', models.JSONField(default=list)),
                ('is_system', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('usage_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_public', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-is_featured', '-usage_count', 'display_name'],
            },
        ),
        migrations.CreateModel(
            name='DashboardTheme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('css_variables', models.JSONField(default=dict)),
                ('background_type', models.CharField(choices=[('solid', 'Solid Color'), ('gradient', 'Gradient'), ('pattern', 'Pattern'), ('image', 'Background Image')], default='solid', max_length=20)),
                ('background_config', models.JSONField(default=dict)),
                ('card_style', models.CharField(choices=[('modern', 'Modern Cards'), ('flat', 'Flat Design'), ('glass', 'Glassmorphism'), ('neumorphism', 'Neumorphism'), ('minimal', 'Minimal Borders')], default='modern', max_length=20)),
                ('animation_level', models.CharField(choices=[('none', 'No Animations'), ('minimal', 'Minimal'), ('medium', 'Medium'), ('full', 'Full Animations')], default='medium', max_length=20)),
                ('is_system', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DashboardWidget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('position_x', models.IntegerField(default=0)),
                ('position_y', models.IntegerField(default=0)),
                ('width', models.IntegerField(default=4)),
                ('height', models.IntegerField(default=300)),
                ('config', models.JSONField(default=dict)),
                ('data_filters', models.JSONField(default=dict)),
                ('refresh_interval', models.IntegerField(blank=True, null=True)),
                ('is_visible', models.BooleanField(default=True)),
                ('z_index', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['position_y', 'position_x'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('visibility', models.CharField(choices=[('private', 'Private'), ('public', 'Public'), ('group', 'Group')], default='private', help_text='Project visibility: private (owner only), public (all customer users), or group (group members)', max_length=10)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the project group', max_length=200)),
                ('description', models.TextField(blank=True, help_text="Optional description of the group's purpose", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Project Group',
                'verbose_name_plural': 'Project Groups',
            },
        ),
        migrations.CreateModel(
            name='TableConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('table_name', models.CharField(help_text="Name of the table (e.g., 'storage', 'volumes', 'hosts', 'zones', 'aliases')", max_length=100)),
                ('visible_columns', models.JSONField(blank=True, default=list, help_text='List of visible column names/keys in order')),
                ('column_widths', models.JSONField(blank=True, default=dict, help_text='Dictionary mapping column names to their widths')),
                ('filters', models.JSONField(blank=True, default=dict, help_text='Active filters as key-value pairs')),
                ('sorting', models.JSONField(blank=True, default=dict, help_text='Sorting configuration (column, direction)')),
                ('page_size', models.IntegerField(default=25, help_text='Number of rows per page')),
                ('additional_settings', models.JSONField(blank=True, default=dict, help_text='Any additional table-specific settings')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Table Configuration',
                'verbose_name_plural': 'Table Configurations',
            },
        ),
        migrations.CreateModel(
            name='UserConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User Configuration',
                'verbose_name_plural': 'User Configurations',
            },
        ),
        migrations.CreateModel(
            name='WidgetDataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('endpoint_pattern', models.CharField(max_length=500)),
                ('parameters_schema', models.JSONField(default=dict)),
                ('cache_duration', models.IntegerField(default=300)),
                ('requires_auth', models.BooleanField(default=True)),
                ('data_format', models.CharField(default='json', max_length=50)),
                ('is_real_time', models.BooleanField(default=False)),
                ('update_frequency', models.IntegerField(default=30)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='WidgetType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('component_name', models.CharField(max_length=100)),
                ('category', models.CharField(choices=[('metrics', 'Key Metrics'), ('charts', 'Charts & Graphs'), ('tables', 'Data Tables'), ('health', 'System Health'), ('activity', 'Activity & Logs'), ('tools', 'Quick Tools'), ('custom', 'Custom Widgets')], max_length=50)),
                ('icon', models.CharField(max_length=50)),
                ('default_width', models.IntegerField(default=4)),
                ('default_height', models.IntegerField(default=300)),
                ('min_width', models.IntegerField(default=2)),
                ('min_height', models.IntegerField(default=200)),
                ('max_width', models.IntegerField(default=12)),
                ('max_height', models.IntegerField(default=800)),
                ('is_resizable', models.BooleanField(default=True)),
                ('requires_data_source', models.BooleanField(default=True)),
                ('config_schema', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AppSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark')], default='light', help_text='UI theme preference', max_length=10)),
                ('items_per_page', models.CharField(choices=[('25', '25'), ('50', '50'), ('100', '100'), ('250', '250'), ('All', 'All')], default='All', help_text='Default number of items per page in tables', max_length=10)),
                ('compact_mode', models.BooleanField(default=False, help_text='Enable compact mode for tables and UI elements')),
                ('auto_refresh', models.BooleanField(default=True, help_text='Enable automatic data refresh')),
                ('auto_refresh_interval', models.IntegerField(choices=[(15, '15 seconds'), (30, '30 seconds'), (60, '1 minute'), (300, '5 minutes')], default=30, help_text='Auto-refresh interval in seconds')),
                ('notifications', models.BooleanField(default=True, help_text='Enable browser notifications')),
                ('show_advanced_features', models.BooleanField(default=False, help_text='Show advanced features and debugging tools')),
                ('zone_ratio', models.CharField(choices=[('one-to-one', 'one-to-one'), ('one-to-many', 'one-to-many'), ('all-to-all', 'all-to-all')], default='one-to-one', help_text='Default zone ratio for SAN operations', max_length=20)),
                ('alias_max_zones', models.IntegerField(default=1, help_text='Maximum number of zones per alias')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(blank=True, help_text='User these settings belong to (null for global defaults)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='app_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'App Settings',
                'verbose_name_plural': 'App Settings',
            },
        ),
    ]
