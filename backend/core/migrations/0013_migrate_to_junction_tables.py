# Generated by Django 5.1.6 on 2025-10-30 04:50

from django.db import migrations


def migrate_alias_projects_to_junction(apps, schema_editor):
    """
    Migrate Alias.projects M2M relationships to ProjectAlias junction table.
    Also migrate create/delete/include_in_zoning flags.
    """
    Alias = apps.get_model('san', 'Alias')
    ProjectAlias = apps.get_model('core', 'ProjectAlias')

    for alias in Alias.objects.prefetch_related('projects').all():
        for project in alias.projects.all():
            # Determine action based on boolean flags
            action = 'reference'  # Default
            if alias.create:
                action = 'create'
            elif alias.delete:
                action = 'delete'

            # Create junction table entry
            ProjectAlias.objects.get_or_create(
                project=project,
                alias=alias,
                defaults={
                    'action': action,
                    'include_in_zoning': alias.include_in_zoning or False,
                    'field_overrides': {},
                    'added_by': None,
                    'notes': 'Migrated from old M2M relationship'
                }
            )


def migrate_zone_projects_to_junction(apps, schema_editor):
    """
    Migrate Zone.projects M2M relationships to ProjectZone junction table.
    Also migrate create/delete flags.
    """
    Zone = apps.get_model('san', 'Zone')
    ProjectZone = apps.get_model('core', 'ProjectZone')

    for zone in Zone.objects.prefetch_related('projects').all():
        for project in zone.projects.all():
            # Determine action based on boolean flags
            action = 'reference'  # Default
            if zone.create:
                action = 'create'
            elif zone.delete:
                action = 'delete'

            # Create junction table entry
            ProjectZone.objects.get_or_create(
                project=project,
                zone=zone,
                defaults={
                    'action': action,
                    'field_overrides': {},
                    'added_by': None,
                    'notes': 'Migrated from old M2M relationship'
                }
            )


def migrate_port_project_to_junction(apps, schema_editor):
    """
    Migrate Port.project FK to ProjectPort junction table.
    """
    Port = apps.get_model('storage', 'Port')
    ProjectPort = apps.get_model('core', 'ProjectPort')

    for port in Port.objects.select_related('project').filter(project__isnull=False):
        # Create junction table entry
        ProjectPort.objects.get_or_create(
            project=port.project,
            port=port,
            defaults={
                'action': 'reference',  # Ports referenced by projects
                'field_overrides': {},
                'added_by': None,
                'notes': 'Migrated from old FK relationship'
            }
        )


def reverse_migrations(apps, schema_editor):
    """
    Reverse migration - clear junction tables.
    This allows rolling back the migration if needed.
    """
    ProjectAlias = apps.get_model('core', 'ProjectAlias')
    ProjectZone = apps.get_model('core', 'ProjectZone')
    ProjectPort = apps.get_model('core', 'ProjectPort')

    # Delete migrated entries (identified by notes field)
    ProjectAlias.objects.filter(notes='Migrated from old M2M relationship').delete()
    ProjectZone.objects.filter(notes='Migrated from old M2M relationship').delete()
    ProjectPort.objects.filter(notes='Migrated from old FK relationship').delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0012_project_status_projectalias_projectfabric_and_more'),
        ('san', '0012_alias_committed_alias_created_by_project_and_more'),
        ('storage', '0007_host_committed_host_created_by_project_host_deployed_and_more'),
    ]

    operations = [
        migrations.RunPython(
            migrate_alias_projects_to_junction,
            reverse_migrations
        ),
        migrations.RunPython(
            migrate_zone_projects_to_junction,
            reverse_migrations
        ),
        migrations.RunPython(
            migrate_port_project_to_junction,
            reverse_migrations
        ),
    ]
